// Code generated by MockGen. DO NOT EDIT.
// Source: .. (interfaces: SecbootKeyLoadingBackend)
//
// Generated by this command:
//
//	mockgen -package secboottest -destination key_loading_backend.go .. SecbootKeyLoadingBackend
//

// Package secboottest is a generated GoMock package.
package secboottest

import (
	reflect "reflect"

	secboot "github.com/snapcore/secboot"
	secboot0 "github.com/snapcore/snapd/secboot"
	gomock "go.uber.org/mock/gomock"
)

// MockSecbootKeyLoadingBackend is a mock of SecbootKeyLoadingBackend interface.
type MockSecbootKeyLoadingBackend struct {
	ctrl     *gomock.Controller
	recorder *MockSecbootKeyLoadingBackendMockRecorder
	isgomock struct{}
}

// MockSecbootKeyLoadingBackendMockRecorder is the mock recorder for MockSecbootKeyLoadingBackend.
type MockSecbootKeyLoadingBackendMockRecorder struct {
	mock *MockSecbootKeyLoadingBackend
}

// NewMockSecbootKeyLoadingBackend creates a new mock instance.
func NewMockSecbootKeyLoadingBackend(ctrl *gomock.Controller) *MockSecbootKeyLoadingBackend {
	mock := &MockSecbootKeyLoadingBackend{ctrl: ctrl}
	mock.recorder = &MockSecbootKeyLoadingBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecbootKeyLoadingBackend) EXPECT() *MockSecbootKeyLoadingBackendMockRecorder {
	return m.recorder
}

// NewFileKeyDataReader mocks base method.
func (m *MockSecbootKeyLoadingBackend) NewFileKeyDataReader(kf string) (secboot.KeyDataReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFileKeyDataReader", kf)
	ret0, _ := ret[0].(secboot.KeyDataReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewFileKeyDataReader indicates an expected call of NewFileKeyDataReader.
func (mr *MockSecbootKeyLoadingBackendMockRecorder) NewFileKeyDataReader(kf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFileKeyDataReader", reflect.TypeOf((*MockSecbootKeyLoadingBackend)(nil).NewFileKeyDataReader), kf)
}

// NewKeyDataFromSealedKeyObjectFile mocks base method.
func (m *MockSecbootKeyLoadingBackend) NewKeyDataFromSealedKeyObjectFile(kf string) (secboot0.SecbootKeyDataActor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewKeyDataFromSealedKeyObjectFile", kf)
	ret0, _ := ret[0].(secboot0.SecbootKeyDataActor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewKeyDataFromSealedKeyObjectFile indicates an expected call of NewKeyDataFromSealedKeyObjectFile.
func (mr *MockSecbootKeyLoadingBackendMockRecorder) NewKeyDataFromSealedKeyObjectFile(kf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewKeyDataFromSealedKeyObjectFile", reflect.TypeOf((*MockSecbootKeyLoadingBackend)(nil).NewKeyDataFromSealedKeyObjectFile), kf)
}

// ReadKeyData mocks base method.
func (m *MockSecbootKeyLoadingBackend) ReadKeyData(arg0 secboot.KeyDataReader) (secboot0.SecbootKeyDataActor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadKeyData", arg0)
	ret0, _ := ret[0].(secboot0.SecbootKeyDataActor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadKeyData indicates an expected call of ReadKeyData.
func (mr *MockSecbootKeyLoadingBackendMockRecorder) ReadKeyData(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadKeyData", reflect.TypeOf((*MockSecbootKeyLoadingBackend)(nil).ReadKeyData), arg0)
}

// ReadSealedKeyObjectFromFile mocks base method.
func (m *MockSecbootKeyLoadingBackend) ReadSealedKeyObjectFromFile(kf string) (secboot0.SecbootSealedKeyObjectActor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSealedKeyObjectFromFile", kf)
	ret0, _ := ret[0].(secboot0.SecbootSealedKeyObjectActor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSealedKeyObjectFromFile indicates an expected call of ReadSealedKeyObjectFromFile.
func (mr *MockSecbootKeyLoadingBackendMockRecorder) ReadSealedKeyObjectFromFile(kf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSealedKeyObjectFromFile", reflect.TypeOf((*MockSecbootKeyLoadingBackend)(nil).ReadSealedKeyObjectFromFile), kf)
}
