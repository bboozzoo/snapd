// Code generated by MockGen. DO NOT EDIT.
// Source: .. (interfaces: SecbootSealedKeyDataActor)
//
// Generated by this command:
//
//	mockgen -package secboottest -destination seled_keydata.go .. SecbootSealedKeyDataActor
//

// Package secboottest is a generated GoMock package.
package secboottest

import (
	reflect "reflect"

	tpm2 "github.com/canonical/go-tpm2"
	gomock "go.uber.org/mock/gomock"
)

// MockSecbootSealedKeyDataActor is a mock of SecbootSealedKeyDataActor interface.
type MockSecbootSealedKeyDataActor struct {
	ctrl     *gomock.Controller
	recorder *MockSecbootSealedKeyDataActorMockRecorder
	isgomock struct{}
}

// MockSecbootSealedKeyDataActorMockRecorder is the mock recorder for MockSecbootSealedKeyDataActor.
type MockSecbootSealedKeyDataActorMockRecorder struct {
	mock *MockSecbootSealedKeyDataActor
}

// NewMockSecbootSealedKeyDataActor creates a new mock instance.
func NewMockSecbootSealedKeyDataActor(ctrl *gomock.Controller) *MockSecbootSealedKeyDataActor {
	mock := &MockSecbootSealedKeyDataActor{ctrl: ctrl}
	mock.recorder = &MockSecbootSealedKeyDataActorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecbootSealedKeyDataActor) EXPECT() *MockSecbootSealedKeyDataActorMockRecorder {
	return m.recorder
}

// PCRPolicyCounterHandle mocks base method.
func (m *MockSecbootSealedKeyDataActor) PCRPolicyCounterHandle() tpm2.Handle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PCRPolicyCounterHandle")
	ret0, _ := ret[0].(tpm2.Handle)
	return ret0
}

// PCRPolicyCounterHandle indicates an expected call of PCRPolicyCounterHandle.
func (mr *MockSecbootSealedKeyDataActorMockRecorder) PCRPolicyCounterHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PCRPolicyCounterHandle", reflect.TypeOf((*MockSecbootSealedKeyDataActor)(nil).PCRPolicyCounterHandle))
}
