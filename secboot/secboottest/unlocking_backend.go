// Code generated by MockGen. DO NOT EDIT.
// Source: .. (interfaces: SecbootUnlockingBackend)
//
// Generated by this command:
//
//	mockgen -package secboottest -destination unlocking_backend.go .. SecbootUnlockingBackend
//

// Package secboottest is a generated GoMock package.
package secboottest

import (
	reflect "reflect"

	secboot "github.com/snapcore/secboot"
	secboot0 "github.com/snapcore/snapd/secboot"
	gomock "go.uber.org/mock/gomock"
)

// MockSecbootUnlockingBackend is a mock of SecbootUnlockingBackend interface.
type MockSecbootUnlockingBackend struct {
	ctrl     *gomock.Controller
	recorder *MockSecbootUnlockingBackendMockRecorder
	isgomock struct{}
}

// MockSecbootUnlockingBackendMockRecorder is the mock recorder for MockSecbootUnlockingBackend.
type MockSecbootUnlockingBackendMockRecorder struct {
	mock *MockSecbootUnlockingBackend
}

// NewMockSecbootUnlockingBackend creates a new mock instance.
func NewMockSecbootUnlockingBackend(ctrl *gomock.Controller) *MockSecbootUnlockingBackend {
	mock := &MockSecbootUnlockingBackend{ctrl: ctrl}
	mock.recorder = &MockSecbootUnlockingBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecbootUnlockingBackend) EXPECT() *MockSecbootUnlockingBackendMockRecorder {
	return m.recorder
}

// ActivateVolumeWithKey mocks base method.
func (m *MockSecbootUnlockingBackend) ActivateVolumeWithKey(volumeName, sourceDevicePath string, key []byte, options *secboot.ActivateVolumeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateVolumeWithKey", volumeName, sourceDevicePath, key, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateVolumeWithKey indicates an expected call of ActivateVolumeWithKey.
func (mr *MockSecbootUnlockingBackendMockRecorder) ActivateVolumeWithKey(volumeName, sourceDevicePath, key, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateVolumeWithKey", reflect.TypeOf((*MockSecbootUnlockingBackend)(nil).ActivateVolumeWithKey), volumeName, sourceDevicePath, key, options)
}

// ActivateVolumeWithKeyData mocks base method.
func (m *MockSecbootUnlockingBackend) ActivateVolumeWithKeyData(volumeName, sourceDevicePath string, authRequestor secboot.AuthRequestor, options *secboot.ActivateVolumeOptions, keys ...secboot0.SecbootKeyDataGetter) error {
	m.ctrl.T.Helper()
	varargs := []any{volumeName, sourceDevicePath, authRequestor, options}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActivateVolumeWithKeyData", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateVolumeWithKeyData indicates an expected call of ActivateVolumeWithKeyData.
func (mr *MockSecbootUnlockingBackendMockRecorder) ActivateVolumeWithKeyData(volumeName, sourceDevicePath, authRequestor, options any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{volumeName, sourceDevicePath, authRequestor, options}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateVolumeWithKeyData", reflect.TypeOf((*MockSecbootUnlockingBackend)(nil).ActivateVolumeWithKeyData), varargs...)
}

// ActivateVolumeWithRecoveryKey mocks base method.
func (m *MockSecbootUnlockingBackend) ActivateVolumeWithRecoveryKey(volumeName, sourceDevicePath string, authRequestor secboot.AuthRequestor, options *secboot.ActivateVolumeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateVolumeWithRecoveryKey", volumeName, sourceDevicePath, authRequestor, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateVolumeWithRecoveryKey indicates an expected call of ActivateVolumeWithRecoveryKey.
func (mr *MockSecbootUnlockingBackendMockRecorder) ActivateVolumeWithRecoveryKey(volumeName, sourceDevicePath, authRequestor, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateVolumeWithRecoveryKey", reflect.TypeOf((*MockSecbootUnlockingBackend)(nil).ActivateVolumeWithRecoveryKey), volumeName, sourceDevicePath, authRequestor, options)
}

// DeactivateVolume mocks base method.
func (m *MockSecbootUnlockingBackend) DeactivateVolume(volumeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateVolume", volumeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateVolume indicates an expected call of DeactivateVolume.
func (mr *MockSecbootUnlockingBackendMockRecorder) DeactivateVolume(volumeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateVolume", reflect.TypeOf((*MockSecbootUnlockingBackend)(nil).DeactivateVolume), volumeName)
}

// NewFileKeyDataReader mocks base method.
func (m *MockSecbootUnlockingBackend) NewFileKeyDataReader(kf string) (secboot.KeyDataReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFileKeyDataReader", kf)
	ret0, _ := ret[0].(secboot.KeyDataReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewFileKeyDataReader indicates an expected call of NewFileKeyDataReader.
func (mr *MockSecbootUnlockingBackendMockRecorder) NewFileKeyDataReader(kf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFileKeyDataReader", reflect.TypeOf((*MockSecbootUnlockingBackend)(nil).NewFileKeyDataReader), kf)
}

// NewKeyDataFromSealedKeyObjectFile mocks base method.
func (m *MockSecbootUnlockingBackend) NewKeyDataFromSealedKeyObjectFile(kf string) (secboot0.SecbootKeyDataActor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewKeyDataFromSealedKeyObjectFile", kf)
	ret0, _ := ret[0].(secboot0.SecbootKeyDataActor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewKeyDataFromSealedKeyObjectFile indicates an expected call of NewKeyDataFromSealedKeyObjectFile.
func (mr *MockSecbootUnlockingBackendMockRecorder) NewKeyDataFromSealedKeyObjectFile(kf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewKeyDataFromSealedKeyObjectFile", reflect.TypeOf((*MockSecbootUnlockingBackend)(nil).NewKeyDataFromSealedKeyObjectFile), kf)
}

// ReadKeyData mocks base method.
func (m *MockSecbootUnlockingBackend) ReadKeyData(arg0 secboot.KeyDataReader) (secboot0.SecbootKeyDataActor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadKeyData", arg0)
	ret0, _ := ret[0].(secboot0.SecbootKeyDataActor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadKeyData indicates an expected call of ReadKeyData.
func (mr *MockSecbootUnlockingBackendMockRecorder) ReadKeyData(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadKeyData", reflect.TypeOf((*MockSecbootUnlockingBackend)(nil).ReadKeyData), arg0)
}

// ReadSealedKeyObjectFromFile mocks base method.
func (m *MockSecbootUnlockingBackend) ReadSealedKeyObjectFromFile(kf string) (secboot0.SecbootSealedKeyObjectActor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSealedKeyObjectFromFile", kf)
	ret0, _ := ret[0].(secboot0.SecbootSealedKeyObjectActor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSealedKeyObjectFromFile indicates an expected call of ReadSealedKeyObjectFromFile.
func (mr *MockSecbootUnlockingBackendMockRecorder) ReadSealedKeyObjectFromFile(kf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSealedKeyObjectFromFile", reflect.TypeOf((*MockSecbootUnlockingBackend)(nil).ReadSealedKeyObjectFromFile), kf)
}
