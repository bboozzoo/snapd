// Code generated by MockGen. DO NOT EDIT.
// Source: .. (interfaces: SecbootKeyDataActor)
//
// Generated by this command:
//
//	mockgen -package secboottest -destination keydata.go .. SecbootKeyDataActor
//

// Package secboottest is a generated GoMock package.
package secboottest

import (
	reflect "reflect"

	secboot "github.com/snapcore/secboot"
	gomock "go.uber.org/mock/gomock"
)

// MockSecbootKeyDataActor is a mock of SecbootKeyDataActor interface.
type MockSecbootKeyDataActor struct {
	ctrl     *gomock.Controller
	recorder *MockSecbootKeyDataActorMockRecorder
	isgomock struct{}
}

// MockSecbootKeyDataActorMockRecorder is the mock recorder for MockSecbootKeyDataActor.
type MockSecbootKeyDataActorMockRecorder struct {
	mock *MockSecbootKeyDataActor
}

// NewMockSecbootKeyDataActor creates a new mock instance.
func NewMockSecbootKeyDataActor(ctrl *gomock.Controller) *MockSecbootKeyDataActor {
	mock := &MockSecbootKeyDataActor{ctrl: ctrl}
	mock.recorder = &MockSecbootKeyDataActorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecbootKeyDataActor) EXPECT() *MockSecbootKeyDataActorMockRecorder {
	return m.recorder
}

// Generation mocks base method.
func (m *MockSecbootKeyDataActor) Generation() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generation")
	ret0, _ := ret[0].(int)
	return ret0
}

// Generation indicates an expected call of Generation.
func (mr *MockSecbootKeyDataActorMockRecorder) Generation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generation", reflect.TypeOf((*MockSecbootKeyDataActor)(nil).Generation))
}

// PlatformName mocks base method.
func (m *MockSecbootKeyDataActor) PlatformName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlatformName")
	ret0, _ := ret[0].(string)
	return ret0
}

// PlatformName indicates an expected call of PlatformName.
func (mr *MockSecbootKeyDataActorMockRecorder) PlatformName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlatformName", reflect.TypeOf((*MockSecbootKeyDataActor)(nil).PlatformName))
}

// SetAuthorizedSnapModels mocks base method.
func (m *MockSecbootKeyDataActor) SetAuthorizedSnapModels(key secboot.PrimaryKey, models ...secboot.SnapModel) error {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range models {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetAuthorizedSnapModels", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAuthorizedSnapModels indicates an expected call of SetAuthorizedSnapModels.
func (mr *MockSecbootKeyDataActorMockRecorder) SetAuthorizedSnapModels(key any, models ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, models...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthorizedSnapModels", reflect.TypeOf((*MockSecbootKeyDataActor)(nil).SetAuthorizedSnapModels), varargs...)
}

// WriteAtomic mocks base method.
func (m *MockSecbootKeyDataActor) WriteAtomic(w secboot.KeyDataWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAtomic", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteAtomic indicates an expected call of WriteAtomic.
func (mr *MockSecbootKeyDataActorMockRecorder) WriteAtomic(w any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAtomic", reflect.TypeOf((*MockSecbootKeyDataActor)(nil).WriteAtomic), w)
}
