// Code generated by MockGen. DO NOT EDIT.
// Source: .. (interfaces: SecbootSealedKeyObjectActor)
//
// Generated by this command:
//
//	mockgen -package secboottest -destination seled_keyobject.go .. SecbootSealedKeyObjectActor
//

// Package secboottest is a generated GoMock package.
package secboottest

import (
	reflect "reflect"

	tpm2 "github.com/canonical/go-tpm2"
	secboot "github.com/snapcore/secboot"
	tpm20 "github.com/snapcore/secboot/tpm2"
	gomock "go.uber.org/mock/gomock"
)

// MockSecbootSealedKeyObjectActor is a mock of SecbootSealedKeyObjectActor interface.
type MockSecbootSealedKeyObjectActor struct {
	ctrl     *gomock.Controller
	recorder *MockSecbootSealedKeyObjectActorMockRecorder
	isgomock struct{}
}

// MockSecbootSealedKeyObjectActorMockRecorder is the mock recorder for MockSecbootSealedKeyObjectActor.
type MockSecbootSealedKeyObjectActorMockRecorder struct {
	mock *MockSecbootSealedKeyObjectActor
}

// NewMockSecbootSealedKeyObjectActor creates a new mock instance.
func NewMockSecbootSealedKeyObjectActor(ctrl *gomock.Controller) *MockSecbootSealedKeyObjectActor {
	mock := &MockSecbootSealedKeyObjectActor{ctrl: ctrl}
	mock.recorder = &MockSecbootSealedKeyObjectActorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecbootSealedKeyObjectActor) EXPECT() *MockSecbootSealedKeyObjectActorMockRecorder {
	return m.recorder
}

// PCRPolicyCounterHandle mocks base method.
func (m *MockSecbootSealedKeyObjectActor) PCRPolicyCounterHandle() tpm2.Handle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PCRPolicyCounterHandle")
	ret0, _ := ret[0].(tpm2.Handle)
	return ret0
}

// PCRPolicyCounterHandle indicates an expected call of PCRPolicyCounterHandle.
func (mr *MockSecbootSealedKeyObjectActorMockRecorder) PCRPolicyCounterHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PCRPolicyCounterHandle", reflect.TypeOf((*MockSecbootSealedKeyObjectActor)(nil).PCRPolicyCounterHandle))
}

// RevokeOldPCRProtectionPolicies mocks base method.
func (m *MockSecbootSealedKeyObjectActor) RevokeOldPCRProtectionPolicies(tpm *tpm20.Connection, authKey secboot.PrimaryKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeOldPCRProtectionPolicies", tpm, authKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeOldPCRProtectionPolicies indicates an expected call of RevokeOldPCRProtectionPolicies.
func (mr *MockSecbootSealedKeyObjectActorMockRecorder) RevokeOldPCRProtectionPolicies(tpm, authKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeOldPCRProtectionPolicies", reflect.TypeOf((*MockSecbootSealedKeyObjectActor)(nil).RevokeOldPCRProtectionPolicies), tpm, authKey)
}

// WriteAtomic mocks base method.
func (m *MockSecbootSealedKeyObjectActor) WriteAtomic(w secboot.KeyDataWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAtomic", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteAtomic indicates an expected call of WriteAtomic.
func (mr *MockSecbootSealedKeyObjectActorMockRecorder) WriteAtomic(w any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAtomic", reflect.TypeOf((*MockSecbootSealedKeyObjectActor)(nil).WriteAtomic), w)
}
